
<localization> : ndt_matching

input
// Subscribers
param_sub = nh.subscribe("config/ndt", 10, param_callback);
gnss_sub = nh.subscribe("gnss_pose", 10, gnss_callback);
initialpose_sub = nh.subscribe("initialpose", 10, initialpose_callback);
points_sub = nh.subscribe("filtered_points", _queue_size, points_callback);
odom_sub = nh.subscribe("/vehicle/odom", _queue_size * 10, odom_callback);
imu_sub = nh.subscribe(_imu_topic.c_str(), _queue_size * 10, imu_callback);

output
// Publishers
predict_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/predict_pose", 10);
predict_pose_imu_pub = nh.advertise<geometry_msgs::PoseStamped>("/predict_pose_imu", 10);
predict_pose_odom_pub = nh.advertise<geometry_msgs::PoseStamped>("/predict_pose_odom", 10);
predict_pose_imu_odom_pub = nh.advertise<geometry_msgs::PoseStamped>("/predict_pose_imu_odom", 10);
ndt_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/ndt_pose", 10);
// current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/current_pose", 10);
localizer_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/localizer_pose", 10);
estimate_twist_pub = nh.advertise<geometry_msgs::TwistStamped>("/estimate_twist", 10);
estimated_vel_mps_pub = nh.advertise<std_msgs::Float32>("/estimated_vel_mps", 10);
estimated_vel_kmph_pub = nh.advertise<std_msgs::Float32>("/estimated_vel_kmph", 10);
estimated_vel_pub = nh.advertise<geometry_msgs::Vector3Stamped>("/estimated_vel", 10);
time_ndt_matching_pub = nh.advertise<std_msgs::Float32>("/time_ndt_matching", 10);
ndt_stat_pub = nh.advertise<autoware_msgs::NDTStat>("/ndt_stat", 10);
ndt_reliability_pub = nh.advertise<std_msgs::Float32>("/ndt_reliability", 10);

<decision>

input
Subs["current_pose"] = nh_.subscribe("current_pose", 20, &DecisionMakerNode::callbackFromCurrentPose, this);
Subs["current_velocity"] = nh_.subscribe("current_velocity", 20, &DecisionMakerNode::callbackFromCurrentVelocity, this);
Subs["light_color"] = nh_.subscribe("light_color", 10, &DecisionMakerNode::callbackFromLightColor, this);
Subs["points_raw"] = nh_.subscribe("filtered_points", 1, &DecisionMakerNode::callbackFromPointsRaw, this);
Subs["final_waypoints"] = nh_.subscribe("final_waypoints", 100, &DecisionMakerNode::callbackFromFinalWaypoint, this);
Subs["twist_cmd"] = nh_.subscribe("twist_cmd", 10, &DecisionMakerNode::callbackFromTwistCmd, this);
Subs["change_flag"] = nh_.subscribe("change_flag", 1, &DecisionMakerNode::callbackFromLaneChangeFlag, this);
Subs["state_cmd"] = nh_.subscribe("state_cmd", 1, &DecisionMakerNode::callbackFromStateCmd, this);
Subs["closest_waypoint"] = nh_.subscribe("closest_waypoint", 1, &DecisionMakerNode::callbackFromClosestWaypoint, this);
Subs["cloud_clusters"] = nh_.subscribe("cloud_clusters", 1, &DecisionMakerNode::callbackFromObjectDetector, this);
g_vmap.subscribe(nh_,
                   Category::POINT | Category::LINE | Category::VECTOR | Category::AREA |
                       Category::POLE |  // basic class
                       Category::DTLANE | Category::STOP_LINE | Category::ROAD_SIGN | Category::CROSS_ROAD)

output
// for controlling other planner
Pubs["state"] = nh_.advertise<std_msgs::String>("state", 1);
Pubs["lane_waypoints_array"] = nh_.advertise<autoware_msgs::LaneArray>(TPNAME_CONTROL_LANE_WAYPOINTS_ARRAY, 10, true);
Pubs["states"] = nh_.advertise<autoware_msgs::State>("/decisionmaker/states", 1, true);
Pubs["light_color"] = nh_.advertise<autoware_msgs::TrafficLight>("/light_color_managed", 1);
// for controlling vehicle
Pubs["lamp_cmd"] = nh_.advertise<autoware_msgs::LampCmd>("/lamp_cmd", 1);
// for visualize status
Pubs["state_overlay"] = nh_.advertise<jsk_rviz_plugins::OverlayText>("/state/overlay_text", 1);
Pubs["crossroad_marker"] = nh_.advertise<visualization_msgs::MarkerArray>("/state/cross_road_marker", 1);
Pubs["crossroad_inside_marker"] = nh_.advertise<visualization_msgs::Marker>("/state/cross_inside_marker", 1);
Pubs["crossroad_bbox"] = nh_.advertise<jsk_recognition_msgs::BoundingBoxArray>("/state/crossroad_bbox", 10);
Pubs["detection_area"] = nh_.advertise<visualization_msgs::Marker>("/state/detection_area",1);
Pubs["stopline_target"] = nh_.advertise<visualization_msgs::Marker>("/state/stopline_target",1);

<global planner>

input
sub_start_pose = nh.subscribe("/initialpose", 1, &GlobalPlanner::callbackGetStartPose, this);
sub_goal_pose = nh.subscribe("move_base_simple/goal", 1, &GlobalPlanner::callbackGetGoalPose, this);
sub_current_pose = nh.subscribe("/current_pose", 10, &GlobalPlanner::callbackGetCurrentPose, this);
sub_current_velocity = nh.subscribe("/current_velocity", 10, &GlobalPlanner::callbackGetVehicleStatus, this);
sub_lanes = nh.subscribe("/vector_map_info/lane", 1, &GlobalPlanner::callbackGetVMLanes,  this);
sub_points = nh.subscribe("/vector_map_info/point", 1, &GlobalPlanner::callbackGetVMPoints,  this);
sub_dt_lanes = nh.subscribe("/vector_map_info/dtlane", 1, &GlobalPlanner::callbackGetVMdtLanes,  this);
sub_intersect = nh.subscribe("/vector_map_info/cross_road", 1, &GlobalPlanner::callbackGetVMIntersections,  this);
sup_area = nh.subscribe("/vector_map_info/area", 1, &GlobalPlanner::callbackGetVMAreas,  this);
sub_lines = nh.subscribe("/vector_map_info/line", 1, &GlobalPlanner::callbackGetVMLines,  this);
sub_stop_line = nh.subscribe("/vector_map_info/stop_line", 1, &GlobalPlanner::callbackGetVMStopLines,  this);
sub_signals = nh.subscribe("/vector_map_info/signal", 1, &GlobalPlanner::callbackGetVMSignal,  this);
sub_vectors = nh.subscribe("/vector_map_info/vector", 1, &GlobalPlanner::callbackGetVMVectors,  this);
sub_curbs = nh.subscribe("/vector_map_info/curb", 1, &GlobalPlanner::callbackGetVMCurbs,  this);
sub_edges = nh.subscribe("/vector_map_info/road_edge", 1, &GlobalPlanner::callbackGetVMRoadEdges,  this);
sub_way_areas = nh.subscribe("/vector_map_info/way_area", 1, &GlobalPlanner::callbackGetVMWayAreas,  this);
sub_cross_walk = nh.subscribe("/vector_map_info/cross_walk", 1, &GlobalPlanner::callbackGetVMCrossWalks,  this);
sub_nodes = nh.subscribe("/vector_map_info/node", 1, &GlobalPlanner::callbackGetVMNodes,  this);

output
pub_Paths = nh.advertise<autoware_msgs::LaneArray>("lane_waypoints_array", 1, true);

<local planner>

input
sub_current_pose = nh.subscribe("/current_pose", 1, &TrajectoryGen::callbackGetCurrentPose, this);
sub_current_velocity = nh.subscribe("/current_velocity", 100, &TrajectoryGen::callbackGetVehicleStatus, this);
sub_GlobalPlannerPaths = nh.subscribe("/lane_waypoints_array", 1, &TrajectoryGen::callbackGetGlobalPlannerPath, this);

output
pub_LocalPath = nh.advertise<autoware_msgs::lane>(topic_prefix + "/final_waypoints", 100,true);
pub_LocalBasePath = nh.advertise<autoware_msgs::lane>("/base_waypoints", 100,true);

<waypoint follower>

input
sub_current_pose = nh.subscribe("/current_pose", 100, &FFSteerControl::callbackGetCurrentPose, this);
sub_current_velocity= nh.subscribe("/current_velocity", 100, &FFSteerControl::callbackGetCurrentVelocity, this);
sub_behavior_state = nh.subscribe("/current_behavior", 10, &FFSteerControl::callbackGetBehaviorState, this);
sub_current_trajectory = nh.subscribe("/final_waypoints", 10, &FFSteerControl::callbackGetCurrentTrajectory, this);

output
pub_VehicleCommand = nh.advertise<geometry_msgs::TwistStamped>("twist_cmd", 100);

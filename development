
<sensing> : velodyne

node.advertise<sensor_msgs::PointCloud2>("velodyne_points", 10);

<sensing> : voxel_grid_filter

input
private_nh.getParam("points_topic", POINTS_TOPIC);
ros::Subscriber scan_sub = nh.subscribe(POINTS_TOPIC, 10, scan_callback);

output
filtered_points_pub = nh.advertise<sensor_msgs::PointCloud2>("/filtered_points", 10);

<detection> : trafficlight_recognizer

input
private_nh.param<std::string>("image_raw_topic", image_topic_name, "/image_raw");
	private_nh.param<std::string>("camera_light_color_topic", camera_light_color_topic_name, "/camera_light_color");

	ros::Subscriber image_sub = n.subscribe(image_topic_name, 1, image_raw_cb);
	ros::Subscriber position_sub = n.subscribe("/roi_signal", 1, extractedPos_cb);
	ros::Subscriber tunedResult_sub = n.subscribe("/tuned_result", 1, tunedResult_cb);

output
signalState_pub = n.advertise<autoware_msgs::TrafficLight>(camera_light_color_topic_name, ADVERTISE_QUEUE_SIZE, ADVERTISE_LATCH);
	signalStateString_pub = n.advertise<std_msgs::String>("/sound_player", ADVERTISE_QUEUE_SIZE);
	marker_pub = n.advertise<visualization_msgs::MarkerArray>("tlr_result", ADVERTISE_QUEUE_SIZE);
	superimpose_image_pub = n.advertise<sensor_msgs::Image>("tlr_superimpose_image", ADVERTISE_QUEUE_SIZE);

	signal_state_array_publisher_ = n.advertise<autoware_msgs::TrafficLightResultArray>("tlr_result_array", ADVERTISE_QUEUE_SIZE);

<detection> : vision_darknet_detect

input
ROS_INFO("Subscribing to... %s", image_raw_topic_str.c_str());
subscriber_image_raw_ = node_handle_.subscribe(image_raw_topic_str, 1, &Yolo3DetectorNode::image_callback, this);

output
publisher_objects_ = node_handle_.advertise<autoware_msgs::DetectedObjectArray>("/detection/image_detector/objects", 1);

<detection> : vision_lane_detect

input
  private_nh.param<std::string>("image_raw_topic", image_topic_name, "/image_raw");
  ROS_INFO("Setting image topic to %s", image_topic_name.c_str());

  ros::Subscriber subscriber = n.subscribe(image_topic_name, 1, lane_cannyhough_callback);

output
image_lane_objects = n.advertise<autoware_msgs::ImageLaneObjects>("lane_pos_xy", 1);

<detection> : lidar_euclidean_cluster_detect

input
points_topic = "/points_raw";
sub = h.subscribe(points_topic, 1, velodyne_callback);

output
  _pub_cluster_cloud = h.advertise<sensor_msgs::PointCloud2>("/points_cluster", 1);
  _pub_ground_cloud = h.advertise<sensor_msgs::PointCloud2>("/points_ground", 1);
  _centroid_pub = h.advertise<autoware_msgs::Centroids>("/cluster_centroids", 1);
  _pub_points_lanes_cloud = h.advertise<sensor_msgs::PointCloud2>("/points_lanes", 1);
  _pub_clusters_message = h.advertise<autoware_msgs::CloudClusterArray>("/detection/lidar_detector/cloud_clusters", 1);
  _pub_detected_objects = h.advertise<autoware_msgs::DetectedObjectArray>("/detection/lidar_detector/objects", 1);

<detection> : lidar_euclidean_track

input
cluster_centroids_sub = n.subscribe("/cloud_clusters_class", 1, cluster_cb);

output
  tracked_pub = n.advertise<autoware_msgs::DetectedObjectArray>("/detected_objects", 1);
  tracked_bba_pub = n.advertise<jsk_recognition_msgs::BoundingBoxArray>("/cloud_cluster_tracked_bounding_box", 1);
  tracked_bba_textlabel_pub = n.advertise<visualization_msgs::MarkerArray>("/cloud_cluster_tracked_text", 1);

<localization> : nmea2tfpose

input
sub1_ = nh_.subscribe("nmea_sentence", 100, &Nmea2TFPoseNode::callbackFromNmeaSentence, this);

output
pub1_ = nh_.advertise<geometry_msgs::PoseStamped>("gnss_pose", 10);

<localization> : ndt_matching

input
// Subscribers
output_sub = nh.subscribe("config/ndt_mapping_output", 10, output_callback);
points_sub = nh.subscribe("points_raw", 100000, points_callback); -> "filtered_points"로 바꿔야함
odom_sub = nh.subscribe("/vehicle/odom", 100000, odom_callback);
imu_sub = nh.subscribe(_imu_topic, 100000, imu_callback);

output
  ndt_map_pub = nh.advertise<sensor_msgs::PointCloud2>("/ndt_map", 1000);
  current_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("/current_pose", 1000);

<decision>

input
Subs["current_pose"] = nh_.subscribe("current_pose", 20, &DecisionMakerNode::callbackFromCurrentPose, this);
Subs["current_velocity"] = nh_.subscribe("current_velocity", 20, &DecisionMakerNode::callbackFromCurrentVelocity, this);
Subs["light_color"] = nh_.subscribe("light_color", 10, &DecisionMakerNode::callbackFromLightColor, this);
Subs["points_raw"] = nh_.subscribe("filtered_points", 1, &DecisionMakerNode::callbackFromPointsRaw, this);
Subs["final_waypoints"] = nh_.subscribe("final_waypoints", 100, &DecisionMakerNode::callbackFromFinalWaypoint, this);
Subs["twist_cmd"] = nh_.subscribe("twist_cmd", 10, &DecisionMakerNode::callbackFromTwistCmd, this);
Subs["change_flag"] = nh_.subscribe("change_flag", 1, &DecisionMakerNode::callbackFromLaneChangeFlag, this);
Subs["state_cmd"] = nh_.subscribe("state_cmd", 1, &DecisionMakerNode::callbackFromStateCmd, this);
Subs["closest_waypoint"] = nh_.subscribe("closest_waypoint", 1, &DecisionMakerNode::callbackFromClosestWaypoint, this);
Subs["cloud_clusters"] = nh_.subscribe("cloud_clusters", 1, &DecisionMakerNode::callbackFromObjectDetector, this);
g_vmap.subscribe(nh_,
                   Category::POINT | Category::LINE | Category::VECTOR | Category::AREA |
                       Category::POLE |  // basic class
                       Category::DTLANE | Category::STOP_LINE | Category::ROAD_SIGN | Category::CROSS_ROAD)

output
// for controlling other planner
Pubs["state"] = nh_.advertise<std_msgs::String>("state", 1);
Pubs["lane_waypoints_array"] = nh_.advertise<autoware_msgs::LaneArray>(TPNAME_CONTROL_LANE_WAYPOINTS_ARRAY, 10, true);
Pubs["states"] = nh_.advertise<autoware_msgs::State>("/decisionmaker/states", 1, true);
Pubs["light_color"] = nh_.advertise<autoware_msgs::TrafficLight>("/light_color_managed", 1);
// for controlling vehicle
Pubs["lamp_cmd"] = nh_.advertise<autoware_msgs::LampCmd>("/lamp_cmd", 1);
// for visualize status
Pubs["state_overlay"] = nh_.advertise<jsk_rviz_plugins::OverlayText>("/state/overlay_text", 1);
Pubs["crossroad_marker"] = nh_.advertise<visualization_msgs::MarkerArray>("/state/cross_road_marker", 1);
Pubs["crossroad_inside_marker"] = nh_.advertise<visualization_msgs::Marker>("/state/cross_inside_marker", 1);
Pubs["crossroad_bbox"] = nh_.advertise<jsk_recognition_msgs::BoundingBoxArray>("/state/crossroad_bbox", 10);
Pubs["detection_area"] = nh_.advertise<visualization_msgs::Marker>("/state/detection_area",1);
Pubs["stopline_target"] = nh_.advertise<visualization_msgs::Marker>("/state/stopline_target",1);

<global planner>

input
sub_start_pose = nh.subscribe("/initialpose", 1, &GlobalPlanner::callbackGetStartPose, this);
sub_goal_pose = nh.subscribe("move_base_simple/goal", 1, &GlobalPlanner::callbackGetGoalPose, this);
sub_current_pose = nh.subscribe("/current_pose", 10, &GlobalPlanner::callbackGetCurrentPose, this);
sub_current_velocity = nh.subscribe("/current_velocity", 10, &GlobalPlanner::callbackGetVehicleStatus, this);
sub_lanes = nh.subscribe("/vector_map_info/lane", 1, &GlobalPlanner::callbackGetVMLanes,  this);
sub_points = nh.subscribe("/vector_map_info/point", 1, &GlobalPlanner::callbackGetVMPoints,  this);
sub_dt_lanes = nh.subscribe("/vector_map_info/dtlane", 1, &GlobalPlanner::callbackGetVMdtLanes,  this);
sub_intersect = nh.subscribe("/vector_map_info/cross_road", 1, &GlobalPlanner::callbackGetVMIntersections,  this);
sup_area = nh.subscribe("/vector_map_info/area", 1, &GlobalPlanner::callbackGetVMAreas,  this);
sub_lines = nh.subscribe("/vector_map_info/line", 1, &GlobalPlanner::callbackGetVMLines,  this);
sub_stop_line = nh.subscribe("/vector_map_info/stop_line", 1, &GlobalPlanner::callbackGetVMStopLines,  this);
sub_signals = nh.subscribe("/vector_map_info/signal", 1, &GlobalPlanner::callbackGetVMSignal,  this);
sub_vectors = nh.subscribe("/vector_map_info/vector", 1, &GlobalPlanner::callbackGetVMVectors,  this);
sub_curbs = nh.subscribe("/vector_map_info/curb", 1, &GlobalPlanner::callbackGetVMCurbs,  this);
sub_edges = nh.subscribe("/vector_map_info/road_edge", 1, &GlobalPlanner::callbackGetVMRoadEdges,  this);
sub_way_areas = nh.subscribe("/vector_map_info/way_area", 1, &GlobalPlanner::callbackGetVMWayAreas,  this);
sub_cross_walk = nh.subscribe("/vector_map_info/cross_walk", 1, &GlobalPlanner::callbackGetVMCrossWalks,  this);
sub_nodes = nh.subscribe("/vector_map_info/node", 1, &GlobalPlanner::callbackGetVMNodes,  this);

output
pub_Paths = nh.advertise<autoware_msgs::LaneArray>("lane_waypoints_array", 1, true);

<local planner>

input
sub_current_pose = nh.subscribe("/current_pose", 1, &TrajectoryGen::callbackGetCurrentPose, this);
sub_current_velocity = nh.subscribe("/current_velocity", 100, &TrajectoryGen::callbackGetVehicleStatus, this);
sub_GlobalPlannerPaths = nh.subscribe("/lane_waypoints_array", 1, &TrajectoryGen::callbackGetGlobalPlannerPath, this);

output
pub_LocalPath = nh.advertise<autoware_msgs::lane>(topic_prefix + "/final_waypoints", 100,true);
pub_LocalBasePath = nh.advertise<autoware_msgs::lane>("/base_waypoints", 100,true);

<waypoint follower>

input
sub_current_pose = nh.subscribe("/current_pose", 100, &FFSteerControl::callbackGetCurrentPose, this);
sub_current_velocity= nh.subscribe("/current_velocity", 100, &FFSteerControl::callbackGetCurrentVelocity, this);
sub_behavior_state = nh.subscribe("/current_behavior", 10, &FFSteerControl::callbackGetBehaviorState, this);
sub_current_trajectory = nh.subscribe("/final_waypoints", 10, &FFSteerControl::callbackGetCurrentTrajectory, this);

output
pub_VehicleCommand = nh.advertise<geometry_msgs::TwistStamped>("twist_cmd", 100);

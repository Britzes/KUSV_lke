// Generated by gencpp from file diag_msgs/diag_node_errors.msg
// DO NOT EDIT!


#ifndef DIAG_MSGS_MESSAGE_DIAG_NODE_ERRORS_H
#define DIAG_MSGS_MESSAGE_DIAG_NODE_ERRORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <diag_msgs/diag_error.h>

namespace diag_msgs
{
template <class ContainerAllocator>
struct diag_node_errors_
{
  typedef diag_node_errors_<ContainerAllocator> Type;

  diag_node_errors_()
    : header()
    , node_number(0)
    , errors()  {
    }
  diag_node_errors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , node_number(0)
    , errors(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _node_number_type;
  _node_number_type node_number;

   typedef std::vector< ::diag_msgs::diag_error_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diag_msgs::diag_error_<ContainerAllocator> >::other >  _errors_type;
  _errors_type errors;





  typedef boost::shared_ptr< ::diag_msgs::diag_node_errors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diag_msgs::diag_node_errors_<ContainerAllocator> const> ConstPtr;

}; // struct diag_node_errors_

typedef ::diag_msgs::diag_node_errors_<std::allocator<void> > diag_node_errors;

typedef boost::shared_ptr< ::diag_msgs::diag_node_errors > diag_node_errorsPtr;
typedef boost::shared_ptr< ::diag_msgs::diag_node_errors const> diag_node_errorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diag_msgs::diag_node_errors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diag_msgs::diag_node_errors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace diag_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'diag_msgs': ['/home/lke/kusv_ke/kusv_ros/src/common/libs/diagnostics_lib/diag_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::diag_node_errors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::diag_node_errors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::diag_node_errors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bdca78d7109434f69bbc8be13c43b37";
  }

  static const char* value(const ::diag_msgs::diag_node_errors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bdca78d7109434fULL;
  static const uint64_t static_value2 = 0x69bbc8be13c43b37ULL;
};

template<class ContainerAllocator>
struct DataType< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diag_msgs/diag_node_errors";
  }

  static const char* value(const ::diag_msgs::diag_node_errors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#the message which describes errors in a single node\n\
\n\
#header for timestamp\n\
Header header\n\
#number of the target node\n\
int32 node_number\n\
#list of error messages in the target node\n\
diag_error[] errors\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: diag_msgs/diag_error\n\
#the message which describes a single error\n\
\n\
#name of the error\n\
string name\n\
#error number in the target node\n\
int32 num\n\
#error category\n\
int32 category\n\
#desctiption of the error\n\
string description\n\
";
  }

  static const char* value(const ::diag_msgs::diag_node_errors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.node_number);
      stream.next(m.errors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct diag_node_errors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diag_msgs::diag_node_errors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diag_msgs::diag_node_errors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "node_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.node_number);
    s << indent << "errors[]" << std::endl;
    for (size_t i = 0; i < v.errors.size(); ++i)
    {
      s << indent << "  errors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diag_msgs::diag_error_<ContainerAllocator> >::stream(s, indent + "    ", v.errors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIAG_MSGS_MESSAGE_DIAG_NODE_ERRORS_H
